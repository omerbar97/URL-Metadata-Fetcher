import Collection, { Collectable } from '../src/collection';
import * as assert from 'assert';

describe('Collection/Collectable', function() {
  let myCollection:Collection<String>;
  let myCollectables = [];

  it('should create collection of type string', function() {
    myCollection = new Collection<String>();
  });

  it('should create collectable items', function() {
    myCollectables.push(new Collectable<String>('my string 1', { myFilter: 'x' }));
    myCollectables.push(new Collectable<String>('my string 2', { myFilter: 'y' }));
    myCollectables.push('my string 3');
    myCollectables.push(new Collectable<String>('my string 4', { myFilter: 'x' }));
  });

  it('should push collectables to collection', function() {
    myCollectables.map((collectable) => {
      myCollection.push(collectable);
    });

    assert.equal(myCollection.count(), myCollectables.length);
  });

  it('should filter collectables', function() {
    assert.equal(myCollection.filter({ myFilter: 'x' }).count(), 2);
  });

  it('should pull item from collection', function() {
    const pulledItem = myCollection.pull();
    assert.equal(pulledItem, 'my string 1');
    assert.equal(myCollection.count(), myCollectables.length - 1);
  });

  it('should return reversed collection', function() {
    assert.equal(myCollection.reverse().pull(), 'my string 4');
  });
})
